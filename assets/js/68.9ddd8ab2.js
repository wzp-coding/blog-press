(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{511:function(_,v,l){"use strict";l.r(v);var e=l(15),t=Object(e.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"了解一下-npm-install-的执行流程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#了解一下-npm-install-的执行流程"}},[_._v("#")]),_._v(" 了解一下 npm install 的执行流程?")]),_._v(" "),l("p"),l("div",{staticClass:"table-of-contents"},[l("ul",[l("li",[l("a",{attrs:{href:"#npm-install"}},[_._v("npm install")])]),l("li",[l("a",{attrs:{href:"#参考"}},[_._v("参考")])])])]),l("p"),_._v(" "),l("h2",{attrs:{id:"npm-install"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#npm-install"}},[_._v("#")]),_._v(" npm install")]),_._v(" "),l("p",[_._v("整体流程：")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("检查 "),l("code",[_._v(".npmrc")]),_._v(" 文件：优先级为：项目级的 "),l("code",[_._v(".npmrc")]),_._v(" 文件 > 用户级的 "),l("code",[_._v(".npmrc")]),_._v(" 文件> 全局级的 "),l("code",[_._v(".npmrc")]),_._v(" 文件 > npm 内置的 "),l("code",[_._v(".npmrc")]),_._v(" 文件")])]),_._v(" "),l("li",[l("p",[_._v("检查项目中有无 "),l("code",[_._v("lock")]),_._v(" 文件。")])]),_._v(" "),l("li",[l("p",[_._v("无 lock 文件：")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("从 "),l("code",[_._v("npm")]),_._v(" 远程仓库获取包信息")])]),_._v(" "),l("li",[l("p",[_._v("根据 package.json")]),_._v(" "),l("p",[_._v("构建依赖树，构建过程：")]),_._v(" "),l("ul",[l("li",[_._v("构建依赖树时，不管其是直接依赖还是子依赖的依赖，优先将其放置在 "),l("code",[_._v("node_modules")]),_._v(" 根目录。")]),_._v(" "),l("li",[_._v("当遇到相同模块时，判断已放置在依赖树的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 "),l("code",[_._v("node_modules")]),_._v(" 下放置该模块。")]),_._v(" "),l("li",[_._v("注意这一步只是确定逻辑上的依赖树，并非真正的安装，后面会根据这个依赖结构去下载或拿到缓存中的依赖包")])])]),_._v(" "),l("li",[l("p",[_._v("在缓存中依次查找依赖树中的每个包")]),_._v(" "),l("ul",[l("li",[_._v("不存在缓存：\n"),l("ul",[l("li",[_._v("从 "),l("code",[_._v("npm")]),_._v(" 远程仓库下载包")]),_._v(" "),l("li",[_._v("校验包的完整性")]),_._v(" "),l("li",[_._v("校验不通过：\n"),l("ul",[l("li",[_._v("重新下载")])])]),_._v(" "),l("li",[_._v("校验通过：\n"),l("ul",[l("li",[_._v("将下载的包复制到 "),l("code",[_._v("npm")]),_._v(" 缓存目录")]),_._v(" "),l("li",[_._v("将下载的包按照依赖结构解压到 "),l("code",[_._v("node_modules")])])])])])])]),_._v(" "),l("p",[_._v("存在缓存：将缓存按照依赖结构解压到 "),l("code",[_._v("node_modules")])])]),_._v(" "),l("li",[l("p",[_._v("将包解压到 "),l("code",[_._v("node_modules")])])]),_._v(" "),l("li",[l("p",[_._v("生成 "),l("code",[_._v("lock")]),_._v(" 文件")])])])]),_._v(" "),l("li",[l("p",[_._v("有 "),l("code",[_._v("lock")]),_._v(" 文件：")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("检查 "),l("code",[_._v("package.json")]),_._v(" 中的依赖版本是否和 "),l("code",[_._v("package-lock.json")]),_._v(" 中的依赖有冲突。")])]),_._v(" "),l("li",[l("p",[_._v("如果没有冲突，直接跳过获取包信息、构建依赖树过程，开始在缓存中查找包信息，后续过程相同")])])])])]),_._v(" "),l("h2",{attrs:{id:"参考"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[_._v("#")]),_._v(" 参考")]),_._v(" "),l("blockquote",[l("p",[l("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1555982",target:"_blank",rel:"noopener noreferrer"}},[_._v("npm install 原理分析"),l("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=t.exports}}]);